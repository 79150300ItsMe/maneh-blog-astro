---
import { slugifyTag, getTagUrl } from '../../lib/slug';

// Import articles data - this should match the data in public/js/data.js
// For now, we'll use a subset of the actual data. In production, this should be imported from a shared data source
const ARTICLES = [
  {
    slug: "setup-vscode-web-development-panduan-lengkap",
    published: "2025-01-22",
    category: "tutorial",
    title: "Setup VSCode untuk Web Development: Panduan Lengkap 2025",
    tags: ["VSCode", "Web Development", "Setup", "Tutorial", "Tools"],
    cover: "https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?w=800&q=80&auto=format",
    minutes: 12,
    summary: "Panduan lengkap setup VSCode untuk web development dengan extension terbaik, settings optimal, dan workflow produktif untuk developer modern.",
    alt: "Antarmuka VSCode untuk web development",
    links: ["cara-membuat-website-dengan-chatgpt-ai-tools", "panduan-lengkap-belajar-python-untuk-pemula", "panduan-karir-developer-2025"]
  },
  {
    slug: "cara-optimasi-chatgpt-panduan-prompts-terbaik",
    published: "2025-01-20",
    category: "tutorial",
    title: "Cara Optimasi ChatGPT: Panduan Prompts Terbaik",
    tags: ["AI", "ChatGPT", "Prompt Engineering", "Tutorial", "Produktivitas"],
    cover: "https://images.unsplash.com/photo-1489599808417-5b4b0b0b0b0b?w=800&q=80&auto=format",
    minutes: 15,
    summary: "Panduan lengkap cara mengoptimalkan ChatGPT dengan prompts yang efektif untuk mendapatkan hasil terbaik dalam berbagai tugas.",
    alt: "Optimasi ChatGPT dengan prompts terbaik",
    links: ["setup-vscode-web-development-panduan-lengkap", "panduan-lengkap-belajar-python-untuk-pemula"]
  },
  {
    slug: "panduan-lengkap-belajar-python-untuk-pemula",
    published: "2025-01-18",
    category: "tutorial",
    title: "Panduan Lengkap Belajar Python untuk Pemula",
    tags: ["Python", "Programming", "Tutorial", "Pemula", "AI"],
    cover: "https://images.unsplash.com/photo-1526379095098-d400fd0bf935?w=800&q=80&auto=format",
    minutes: 20,
    summary: "Panduan komprehensif belajar Python dari dasar hingga mahir, cocok untuk pemula yang ingin memulai karir programming.",
    alt: "Belajar Python untuk pemula",
    links: ["setup-vscode-web-development-panduan-lengkap", "cara-optimasi-chatgpt-panduan-prompts-terbaik"]
  }
];

// Generate all possible tag slugs from actual articles
export function getStaticPaths() {
  // Define articles data here for getStaticPaths
  const articlesData = [
    {
      slug: "setup-vscode-web-development-panduan-lengkap",
      tags: ["VSCode", "Web Development", "Setup", "Tutorial", "Tools"]
    },
    {
      slug: "cara-optimasi-chatgpt-panduan-prompts-terbaik",
      tags: ["AI", "ChatGPT", "Prompt Engineering", "Tutorial", "Produktivitas"]
    },
    {
      slug: "panduan-lengkap-belajar-python-untuk-pemula",
      tags: ["Python", "Programming", "Tutorial", "Pemula", "AI"]
    }
  ];
  
  const allTags = new Set();
  
  // Collect all unique tags from articles
  articlesData.forEach(article => {
    if (article.tags && Array.isArray(article.tags)) {
      article.tags.forEach(tag => {
        allTags.add(slugifyTag(tag));
      });
    }
  });
  
  // Generate paths for each tag
  return Array.from(allTags).map(tag => ({
    params: { tag }
  }));
}

const { tag } = Astro.params;
const activeTag = (tag ?? "").toLowerCase();

// Filter articles by tag with defensive handling
const filteredArticles = ARTICLES.filter(article => {
  // Defensive handling of tags array
  let tags = article.tags;
  if (typeof tags === 'string') {
    tags = tags.split(/[,|]/).map(t => t.trim()).filter(t => t);
  }
  if (!Array.isArray(tags)) {
    tags = [];
  }
  
  return tags.some(tagName => slugifyTag(tagName) === activeTag);
});

// Generate title and description with proper capitalization
const tagDisplayName = activeTag.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
const title = `Artikel dengan Tag: ${tagDisplayName} — Maneh`;
const description = `Kumpulan artikel dengan tag "${tagDisplayName}" dari Maneh. Tutorial dan tips teknologi terlengkap dengan bahasa sederhana.`;

// Generate article URLs
const articlesWithUrls = filteredArticles.map(article => {
  const date = new Date(article.published);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  // Get order number based on category and published date
  const categoryArticles = ARTICLES.filter(art => art.category === article.category)
    .sort((a, b) => new Date(b.published).getTime() - new Date(a.published).getTime());
  const order = categoryArticles.findIndex(art => art.slug === article.slug) + 1;
  
  const articleUrl = `/${year}/${month}/${day}/${order}-${article.slug}`;
  
  return {
    ...article,
    url: articleUrl
  };
});
---

<!doctype html>
<html lang="id">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
  <title>{title}</title>
  <meta name="description" content={description}>
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content={`https://maneh.blog/tag/${activeTag}`}>
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:image" content="https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?q=80&w=1200&h=630&auto=format&fit=crop&crop=center">
  <meta property="og:site_name" content="Maneh">
  <meta property="og:locale" content="id_ID">
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content={`https://maneh.blog/tag/${activeTag}`}>
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  <meta name="twitter:image" content="https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?q=80&w=1200&h=630&auto=format&fit=crop&crop=center">
  
  <!-- Canonical URL -->
  <link rel="canonical" href={`https://maneh.blog/tag/${activeTag}`}>
  
  <!-- Styles -->
  <link rel="stylesheet" href="/css/style.css?v=1.4" type="text/css">
</head>
<body>
  <main class="container">
    <section class="page">
      <header>
        <h1>Artikel dengan Tag: {tagDisplayName}</h1>
        <p class="tag-description">{description}</p>
        <p class="tag-count">Ditemukan {filteredArticles.length} artikel</p>
      </header>
      
      {filteredArticles.length > 0 ? (
        <div class="articles-list">
          {articlesWithUrls.map(article => (
            <article class="card">
              <a href={article.url} data-slug={article.slug}>
                <img 
                  class="thumb" 
                  loading="lazy" 
                  decoding="async" 
                  src={article.cover} 
                  alt={article.title}
                  onerror="this.src='https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?q=80&w=1200&h=630&auto=format&fit=crop&crop=center'; this.onerror=null;"
                >
                <div class="h2">{article.title}</div>
                <div class="meta">
                  <time datetime={article.published}>
                    {new Date(article.published).toLocaleDateString('id-ID', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                </div>
                <p class="desc">{article.summary}</p>
                {article.tags && article.tags.length > 0 && (
                  <div class="tags">
                    {article.tags.map(tag => (
                      <a href={getTagUrl(tag)} class="tag-item" rel="tag" data-tag={slugifyTag(tag)} aria-label={`Tag: ${tag}`}>
                        {tag}
                      </a>
                    ))}
                  </div>
                )}
              </a>
            </article>
          ))}
        </div>
      ) : (
        <div class="no-articles">
          <p>Tidak ada artikel untuk tag "{tagDisplayName}".</p>
          <p><a href="/">← Kembali ke beranda</a></p>
        </div>
      )}
    </section>
  </main>
  
  <!-- Fallback script for hash-based navigation -->
  <script>
    // Handle hash-based tag navigation for backward compatibility
    (function() {
      const hash = window.location.hash;
      if (hash && hash.startsWith('#tag/')) {
        const tagSlug = hash.replace('#tag/', '');
        console.info('Hash-based tag navigation detected, redirecting to:', `/tag/${tagSlug}`);
        window.location.replace(`/tag/${tagSlug}`);
      }
    })();
  </script>
</body>
</html>
